version: "3.8"
name: boardly

services:
  database:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_UI_PORT}:${MINIO_UI_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":${MINIO_UI_PORT}"
    volumes:
      - minio-data:/data

  socket:
    build:
      context: ./websocket
    ports:
      - "${WEBSOCKET_PORT}:${WEBSOCKET_PORT}"
    environment:
      - PORT=${WEBSOCKET_PORT}
      - FRONTEND_URL=${FRONTEND_URL}

  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: stripe-cli
    environment:
      STRIPE_API_KEY: ${STRIPE_SECRET_KEY}
    entrypoint: /bin/sh
    command: >
      -c "stripe listen --api-key ${STRIPE_SECRET_KEY} --forward-to host.docker.internal:8080/checkout/webhook"
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: database
      APP_NAME: ${APP_NAME}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_ACCESS_EXPIRATION_MS: ${JWT_ACCESS_EXPIRATION_MS}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRATION_MS: ${JWT_REFRESH_EXPIRATION_MS}
      STRIPE_SECRET: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      MAX_NON_PREMIUM_TEAMS: ${MAX_NON_PREMIUM_TEAMS}
      MAX_NON_PREMIUM_BOARDS: ${MAX_NON_PREMIUM_BOARDS}
      FRONTEND_URL: ${FRONTEND_URL}
      FRONTEND_SERVER_URL: ${FRONTEND_SERVER_URL}
    depends_on:
      - database
      - minio
    ports:
      - "${BACKEND_PORT}:8080"
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_APP_API_URL: ${NEXT_APP_API_URL}
        MINIO_ENDPOINT: ${MINIO_ENDPOINT}
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
        NEXT_PUBLIC_WEBSOCKET_URL: ${NEXT_PUBLIC_WEBSOCKET_URL}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
        MAX_NON_PREMIUM_TEAMS: ${MAX_NON_PREMIUM_TEAMS}
        MAX_NON_PREMIUM_BOARDS: ${MAX_NON_PREMIUM_BOARDS}
        NEXT_PUBLIC_LOGIN_REDIRECT: ${NEXT_PUBLIC_LOGIN_REDIRECT}
        MINIO_INNER_ENDPOINT: ${MINIO_INNER_ENDPOINT}
    environment:
      NEXT_APP_API_URL: ${NEXT_APP_API_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      NEXT_PUBLIC_WEBSOCKET_URL: ${NEXT_PUBLIC_WEBSOCKET_URL}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      MAX_NON_PREMIUM_TEAMS: ${MAX_NON_PREMIUM_TEAMS}
      MAX_NON_PREMIUM_BOARDS: ${MAX_NON_PREMIUM_BOARDS}
      NEXT_PUBLIC_LOGIN_REDIRECT: ${NEXT_PUBLIC_LOGIN_REDIRECT}
      MINIO_INNER_ENDPOINT: ${MINIO_INNER_ENDPOINT}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - socket

volumes:
  database-data:
  minio-data:
